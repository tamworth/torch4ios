#!/bin/bash
set -e
SCRIPT_DIR=$( cd $(dirname $0) ; pwd -P )
XCODE_ROOT=`xcode-select -print-path`
IPHONE_SDKVERSION=`xcodebuild -showsdks | grep iphoneos | egrep "[[:digit:]]+\.[[:digit:]]+" -o | tail -1`
ARM_DEV_CMD="xcrun --sdk iphoneos"
SIM_DEV_CMD="xcrun --sdk iphonesimulator"
EXTRA_FLAGS="-miphoneos-version-min=8.0 -O2"
RESULTS_DIR=$SCRIPT_DIR/results

# configuration environment variables path
configure_exports() {
    if [[ $1 = arm* ]]; then
        DEV_CMD=$ARM_DEV_CMD
    else
        DEV_CMD=$SIM_DEV_CMD
    fi
    if [[ $1 = armv7* ]]; then
        NEON_FLAGS=" -D__NEON__ -mfpu=neon"
    else
        NEON_FLAGS=" -D__NEON_HL__"
    fi
    export CXX="$DEV_CMD clang++ -arch $1 $EXTRA_FLAGS $NEON_FLAGS"
    export CC="$DEV_CMD clang -arch $1 $EXTRA_FLAGS $NEON_FLAGS"

    XCMAKE=`$DEV_CMD --find make`
    XCPATH=`dirname $XCMAKE`
    export PATH="$XCPATH:$PATH"
    XCRANLIB=`$DEV_CMD --find ranlib`
    XCPATH=`dirname $XCRANLIB`
    export PATH="$XCPATH:$PATH"
}

build_luajit(){
	# configuration make path
	#configure_exports $1

	ISDKP=$(xcrun --sdk iphoneos --show-sdk-path)

    ICC=$(xcrun --sdk iphoneos --find clang)

	ISDKF="-arch $1 -isysroot $ISDKP"

	echo "$PATH"

	#echo "sysroot:$SROOT | $ICC | $ISDKF"
	export PATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:$PATH"
	# Build host luajit for minilua and buildvm
	cd distro/exe/luajit-rocks/luajit-2.1

	make clean
	if [[ $1 = *64 ]]; then
		echo "====== build 64bit luajit $ISDKF ======="
		make CROSS="$(dirname $ICC)/" TARGET_FLAGS="$ISDKF" TARGET_SYS=iOS
	else
		echo "====== build 32bit luajit $ISDKF ======="
		make HOST_CC="clang -m32 -arch i386" CROSS="$(dirname $ICC)/" TARGET_FLAGS="$ISDKF" TARGET_SYS=iOS
	fi
	#make CROSS="$(dirname $ICC)/" TARGET_FLAGS="$ISDKF" TARGET_SYS=iOS
	echo "Done installing Lua"

	cd $SCRIPT_DIR
}

generate_arch() {
	# clean install
	rm -rf $SCRIPT_DIR/installed/

	export IOS_ARCH=$1

	echo "build luajit first"
	# pre build luajit first
	build_luajit $1

    configure_exports $1
    rm -rf $SCRIPT_DIR/build
    mkdir -p $SCRIPT_DIR/build
    cd $SCRIPT_DIR/build
    SROOT=`$DEV_CMD --show-sdk-path`
    #DWITH_LUA51=ON WITH_LUAJIT21=ON
    cmake .. -DCMAKE_VERBOSE_MAKEFILE=ON -DWITH_LUAROCKS=OFF -DWITH_LUAJIT21=ON \
    		 -DCMAKE_INSTALL_PREFIX="$SCRIPT_DIR/installed/" -DCMAKE_OSX_SYSROOT=$SROOT \
    		 -DLIBRARY_OUTPUT_PATH="$SCRIPT_DIR/installed" \
    		 -DLUAJIT_SYSTEM_MINILUA="$SCRIPT_DIR/distro/exe/luajit-rocks/luajit-2.1/src/host/minilua" \
    		 -DLUAJIT_SYSTEM_BUILDVM="$SCRIPT_DIR/distro/exe/luajit-rocks/luajit-2.1/src/host/buildvm" \

    make install

    echo "********** build success $1 ***********"

    cd $SCRIPT_DIR

    mkdir -p $SCRIPT_DIR/framework/lua
    mkdir -p $SCRIPT_DIR/framework/lib/$1
    mkdir -p $SCRIPT_DIR/framework/include

    # copy includes
    cp -r $SCRIPT_DIR/installed/include/* $SCRIPT_DIR/framework/include
    #rm -rf $SCRIPT_DIR/installed/

    # copy libs

    cp $SCRIPT_DIR/libpng16.dylib		                     $SCRIPT_DIR/installed/libpng16.dylib

    cp $SCRIPT_DIR/installed/libpng16.dylib		             $SCRIPT_DIR/framework/lib/$1/libpng16.dylib
    cp $SCRIPT_DIR/installed/libluajit.dylib 		         $SCRIPT_DIR/framework/lib/$1/
    cp $SCRIPT_DIR/installed/libluaT.dylib                   $SCRIPT_DIR/framework/lib/$1/
    cp $SCRIPT_DIR/installed/libTH.dylib                     $SCRIPT_DIR/framework/lib/$1/
    cp $SCRIPT_DIR/installed/libtorch.dylib                  $SCRIPT_DIR/framework/lib/$1/
    cp $SCRIPT_DIR/installed/libsundown.dylib 		         $SCRIPT_DIR/framework/lib/$1/
    cp $SCRIPT_DIR/installed/libthreadsmain.dylib 		     $SCRIPT_DIR/framework/lib/$1/
    cp $SCRIPT_DIR/installed/libthreads.dylib 		         $SCRIPT_DIR/framework/lib/$1/
    cp $SCRIPT_DIR/installed/libppm.dylib 		             $SCRIPT_DIR/framework/lib/$1/

    cp $SCRIPT_DIR/installed/libTHNN.dylib 		             $SCRIPT_DIR/framework/lib/$1/
    cp $SCRIPT_DIR/installed/libpaths.dylib              	 $SCRIPT_DIR/framework/lib/$1/
    cp $SCRIPT_DIR/installed/libsys.dylib                    $SCRIPT_DIR/framework/lib/$1/
    cp $SCRIPT_DIR/installed/libnnx.dylib                    $SCRIPT_DIR/framework/lib/$1/
    cp $SCRIPT_DIR/installed/libimage.dylib                  $SCRIPT_DIR/framework/lib/$1/
    # cp $SCRIPT_DIR/installed/libjpeg.a                       $SCRIPT_DIR/framework/lib/$1/
    cp $SCRIPT_DIR/installed/libpng.dylib                    $SCRIPT_DIR/framework/lib/$1/
    # cp $SCRIPT_DIR/installed/libpng-static.a                 $SCRIPT_DIR/framework/lib/$1/
    cp $SCRIPT_DIR/installed/libcjson.dylib                  $SCRIPT_DIR/framework/lib/$1/

    LUA_INSTALL_DIR="$SCRIPT_DIR/installed/share/lua/5.1"

    # copy lua scripts
    mkdir -p $SCRIPT_DIR/framework/lua/torch
    cp -r $LUA_INSTALL_DIR/torch/*.lua $SCRIPT_DIR/framework/lua/torch/

    mkdir -p $SCRIPT_DIR/framework/lua/dok
    cp -r $LUA_INSTALL_DIR/dok/*.lua $SCRIPT_DIR/framework/lua/dok/

    mkdir -p $SCRIPT_DIR/framework/lua/paths
    cp -r $LUA_INSTALL_DIR/paths/*.lua $SCRIPT_DIR/framework/lua/paths/

    mkdir -p $SCRIPT_DIR/framework/lua/image
    cp -r $SCRIPT_DIR/distro/pkg/image/*.lua $SCRIPT_DIR/framework/lua/image/

    mkdir -p $SCRIPT_DIR/framework/lua/nn
    cp -r $LUA_INSTALL_DIR/nn/*.lua $SCRIPT_DIR/framework/lua/nn/

    mkdir -p $SCRIPT_DIR/framework/lua/sys
    cp -r $LUA_INSTALL_DIR/sys/*.lua $SCRIPT_DIR/framework/lua/sys/

    mkdir -p $SCRIPT_DIR/framework/lua/xlua
    cp -r $LUA_INSTALL_DIR/xlua/*.lua $SCRIPT_DIR/framework/lua/xlua/

    mkdir -p $SCRIPT_DIR/framework/lua/nnx
    cp -r $LUA_INSTALL_DIR/nnx/*.lua $SCRIPT_DIR/framework/lua/nnx/

    # copy without install lua
    mkdir -p $SCRIPT_DIR/framework/lua/optnet
    cp -r $SCRIPT_DIR/extra/optnet/*.lua $SCRIPT_DIR/framework/lua/optnet/

}

extract_archive() {
    mkdir $1
    cd $1
    ar -x ../lib$1.a
    cd ..
}

extract_recombine() {
#    cd $SCRIPT_DIR/framework/lib/$1
#    extract_archive luajit-static
    # extract_archive cjson
    # extract_archive image
    # extract_archive jpeg
    # extract_archive png
    # extract_archive png-static
    # extract_archive luaT
    # extract_archive THNN
    # extract_archive sys
    # extract_archive nnx
    # extract_archive TH
    # extract_archive paths
    # extract_archive torch
    # extract_archive luajit
#    ar -qc libtorch-$1.a  \
#         luajit-static/*.o 
        #jpeg/*.o png-static/*.o THNN/*.o png/*.o  cjson/*.o  image/*.o torch/*.o sys/*.o paths/*.o luaT/*.o TH/*.o luajit/*.o nnx/*.o \
    cd $SCRIPT_DIR
}

changeDylibRefPath() {
    local dylibpath=${RESULTS_DIR}/$2/$1.framework/$1
    install_name_tool Ôºçchange $1.dylib @rpath/../Frameworks/$2.framework/$2 $3
}

generate_framework() {

    local frameworkpath=${RESULTS_DIR}/$2/$3.framework
    mkdir -p ${frameworkpath}

    cp $SCRIPT_DIR/installed/$1.dylib ${frameworkpath}/$3
    cp $SCRIPT_DIR/framework/Info.plist ${frameworkpath}

    /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier com.ploverlake.$3" ${frameworkpath}/Info.plist
    /usr/libexec/PlistBuddy -c "Set :CFBundleName $3" ${frameworkpath}/Info.plist
    /usr/libexec/PlistBuddy -c "Set :CFBundleExecutable $3" ${frameworkpath}/Info.plist
    /usr/libexec/PlistBuddy -c "Set :CFBundleVersion 1" ${frameworkpath}/Info.plist

}

updated_framework_ref()
{
    echo "updated_framework_ref $3/$4"
    # Revise rpath
    local fromname=$3
    local toname=$4

    local old_path="@rpath/${fromname}.dylib"
    local new_path="@rpath/../Frameworks/${toname}.framework/${toname}"
    local dy_path="${RESULTS_DIR}/$2/$1.framework/$1"
    #echo "====="
    #echo "${old_path}"
    #echo "${new_path}"
    #echo "${dy_path}"
    #echo "====="
    install_name_tool -change ${old_path} ${new_path} ${dy_path}
}

updated_framework() {

    echo "==========updated_framework $2/$1 =================="

    local dy_path="${RESULTS_DIR}/$2/$1.framework/$1"
    install_name_tool -id "@rpath/../Frameworks/$1.framework/$1" "${dy_path}"

    updated_framework_ref $1 $2 libluaT.0 luaT
    updated_framework_ref $1 $2 libTH.0 TH
    updated_framework_ref $1 $2 libluajit luajit

    if [ $1 = libpng ]; then
        install_name_tool -add_rpath "@rpath/../Frameworks/libpng16.framework/libpng16" "${dy_path}"
        otool -L ${RESULTS_DIR}/$2/$1.framework/$1
    fi


    #    changeDylibRefPath libTH.0 libTH ${RESULTS_DIR}/$2/$1.framework/$1
    #    changeDylibRefPath libluajit libluajit "${RESULTS_DIR}/$2/$1.framework/$1"
    #    changeDylibRefPath libluaT.0 libluaT "${RESULTS_DIR}/$2/$1.framework/$1"

    # install_name_tool -id "@rpath/$1.dylib" "$1"

    # code sign
    /usr/bin/codesign --force --sign - --timestamp=none "${dy_path}"

    echo "==========updated_framework $2/$1 =================="
}

generate_framework_group() {
    mkdir -p ${RESULTS_DIR}/$1
    generate_framework libpng16 $1 libpng16
    generate_framework libTHNN $1 libTHNN
    generate_framework libtorch $1 libtorch
    generate_framework libpaths $1 libpaths
    generate_framework libpng $1 libpng
    generate_framework libsys $1 libsys
    generate_framework libimage $1 libimage
    generate_framework libcjson $1 cjson
    generate_framework libluajit $1 luajit
    generate_framework libluaT $1 luaT
    generate_framework libTH $1 TH
    generate_framework libsundown $1 sundown
    generate_framework libthreads $1 threads
    generate_framework libthreadsmain $1 threadsmain
    generate_framework libppm $1 ppm
    generate_framework libnnx $1 nnx

    updated_framework libpng16 $1
    updated_framework libTHNN $1
    updated_framework libtorch $1
    updated_framework libpaths $1
    updated_framework libpng $1
    updated_framework libsys $1
    updated_framework libimage $1
    updated_framework cjson $1
    updated_framework luajit $1
    updated_framework luaT $1
    updated_framework TH $1
    updated_framework sundown $1
    updated_framework threads $1
    updated_framework threadsmain $1
    updated_framework ppm $1
    updated_framework nnx $1
}

#lipo_libs() {
#    $ARM_DEV_CMD lipo -create                          \
#    $SCRIPT_DIR/framework/lib/arm64/libtorch-arm64.a   \
#    -output $SCRIPT_DIR/framework/lib/libtorch.a
#}

echo clean previous framework files
rm -rf $SCRIPT_DIR/framework/lua
rm -rf $SCRIPT_DIR/framework/lib
rm -rf $SCRIPT_DIR/framework/include
rm -rf $SCRIPT_DIR/Torch.framework
rm -rf $RESULTS_DIR

echo "generating torch"
generate_arch arm64

#echo "extracting archives and recombining"
#extract_recombine arm64

echo "generate frameworks"
generate_framework_group arm64

#echo "creating universal binary"
#lipo_libs

echo "creating headers & lua resources"
mkdir -p $RESULTS_DIR/Headers
mkdir -p $RESULTS_DIR/Resources
cp -r $SCRIPT_DIR/framework/include/* $RESULTS_DIR/Headers
cp -r $SCRIPT_DIR/framework/lua $RESULTS_DIR/Resources

echo "==> exported complete framework in Torch.framework"
echo "    in Xcode just drag Torch.framework into"
echo "    Build Phases > Link Binary with Libraries"
echo "    and add path to Torch.framework parent folder in"
echo "    Build Settings > Framework Search Paths"
echo
echo "    Include headers with #include <Torch/Torch.h>"
